// Optics is a namespace isolating all business logic relating to the transfer of radiation
// This was written so I could decouple academic concerns (like how to model something mathematically) from architectural concerns (like how a model is represented through classes)
// All functions within the namespace are static and have no side effects
// The only data structures allowed are rasters and grid objects

var Optics = (function() {
	var Optics = {};

	// This calculates the intensity of incident radiation (in Watts/m^2) 
	// that's felt on the surface of an object from a circular light source 
	// The function considers the following:
	//  * the distance to the light (the "Inverse Square Law")
	//  * the occlusion of light by the object itself
	//  * the angle at which the light hits ("Lambert's Law")
	Optics.incident_radiation_field = function(
			// This is a vector raster indicating the surface normal of an object
			surface_normal,
			// This is a vector indicating the light's offset from the object
			light_offset, 
			// total power output of light source in all directions, in Watts
			luminosity,
			// Float32Raster that stores results
			result
		) {
		result = result || Float32Raster(surface_normal.grid);

		// use cosine similarity to find cosine of light's zenith angle
		VectorField.vector_similarity 	(surface_normal, light_offset, 	result);

		// obscure light where it is occluded by the object
		Float32RasterInterpolation.clamp(result, 0, 1, 										result);

		// intensity of stellar insolation, in Watts/m^2
		// this is the power generated by a 100% efficient, 1 m^2 solar panel that's directly facing the sun
		var light_distance = Vector.magnitude(
			light_offset.x,
			light_offset.y,
			light_offset.z
		);
		// intensity of stellar insolation, in Watts/m^2
		// this is the power generated by a 100% efficient, 1 m^2 solar panel that's directly facing the sun
		var intensity = luminosity / ( 4 * Math.PI * light_distance * light_distance );

		ScalarField.mult_scalar			( result, intensity, 					result );

		return result;
	}


	return Optics;
})();
